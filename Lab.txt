1) #include <stdio.h>

Призначення: функції введення/виведення — "printf()", "fprintf()", "perror()", "scanf()", тощо.
Навіщо тут: щоб виводити результати роботи програми, діагностичні повідомлення, значення змінних або помилки в консоль.

2) #include <stdlib.h>

Призначення: стандартні функції керування пам’яттю і процесами: "malloc()", "free()", "exit()", "atoi()", "rand()", тощо.
Навіщо тут: може використовуватись для динамічного виділення пам’яті під буфери або для коректного завершення програми ("exit(EXIT_FAILURE)").

3) #include <string.h>

Призначення: робота з рядками та пам’яттю — "memset()", "memcpy()", "strcmp()", "strlen()".
Навіщо тут: щоб очищати або копіювати байти буфера перед створенням пакета, наприклад:

memset(buffer, 0, sizeof(buffer));
memcpy(&packet, data, data_len);
  
4) #include <unistd.h>

Призначення: стандартні POSIX-функції роботи з файловими дескрипторами, процесами і системними викликами — "read()", "write()", "close()", "sleep()", "getpid()".
Навіщо тут: використовується в більшості системних програм на Linux/Unix для базових системних викликів (у тому числі роботи з сокетами).

5) #include <errno.h>

Призначення: визначає глобальну змінну "errno" і коди помилок системних викликів.
Навіщо тут: щоб з’ясувати, чому не вдалося створити сокет або відправити пакет:

  
  if (socket(...) < 0) {
      perror("socket error");  // використовує errno
  }
  
Мережеві бібліотеки (системні)

6) #include <sys/socket.h>

Призначення: основні типи і функції роботи з сокетами ("socket()", "bind()", "sendto()", "recvfrom()", "setsockopt()").
Навіщо тут: обов’язковий заголовок для створення і використання будь-яких сокетів (у т.ч. raw sockets).

7) #include <arpa/inet.h>

Призначення: функції для роботи з IP-адресами — "inet_addr()", "inet_ntoa()", "inet_pton()", "inet_ntop()".
Навіщо тут: перетворення між текстовим (наприклад, ""8.8.8.8"") і бінарним ("in_addr") представленням адрес:

inet_pton(AF_INET, "8.8.8.8", &dest_addr.sin_addr);
  
8) #include <netinet/ip.h>    // структура iphdr

Призначення: визначає структуру IPv4-заголовка — "struct iphdr" (або "struct ip").
Навіщо тут: дозволяє програмі вручну створювати IP-заголовок, задавати TTL, ідентифікатор, прапорці DF/MF, протокол, тощо.

9) #include <netinet/ip_icmp.h>  // структура icmphdr

Призначення: опис структури ICMP-заголовка ("struct icmphdr") та констант типів повідомлень ICMP (echo request, reply, time exceeded...).
Навіщо тут: якщо програма формує або розбирає ICMP-пакети (як "ping"), вона використовує цю структуру:

struct icmphdr icmp = (struct icmphdr )(buffer + sizeof(struct iphdr));
icmp->type = ICMP_ECHO;
icmp->code = 0;
  
10) #include <netinet/in.h>

Призначення: базові типи і структури для роботи з IP-адресами та портами — "struct sockaddr_in", "INADDR_ANY", "htons()", "htonl()".
Навіщо тут: для створення адреси призначення при відправці пакетів:

struct sockaddr_in dest;
dest.sin_family = AF_INET;
dest.sin_port = htons(0);
  
11) #include <sys/types.h>

Призначення: загальні визначення типів системних викликів ("pid_t", "size_t", "ssize_t", "socklen_t", тощо).
Навіщо тут: забезпечує сумісність з функціями сокетів, які використовують ці типи у своїх параметрах.
